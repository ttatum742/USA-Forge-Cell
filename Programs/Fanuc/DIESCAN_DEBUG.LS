/PROG  DIESCAN_DEBUG
/ATTR
OWNER		= MNEDITOR;
COMMENT		= "Die Scanner Debug Coordinator";
PROG_SIZE	= 1200;
CREATE		= DATE 25-07-07  TIME 14:00:00;
MODIFIED	= DATE 25-07-07  TIME 14:00:00;
FILE_NAME	= ;
VERSION		= 0;
LINE_COUNT	= 120;
MEMORY_SIZE	= 2000;
PROTECT		= read_write;
TCD:  STACK_SIZE	= 0,
     TASK_PRIORITY	= 50,
     TIME_SLICE	= 0,
     BUSY_LAMP_OFF	= 0,
     ABORT_REQUEST	= 0,
     PAUSE_REQUEST	= 0;
DEFAULT_GROUP	= 1,*,*,*,*;
CONTROL_CODE	= 00000000 00000000;
LOCAL_REGISTERS	= 0,0,0;
/APPL

AUTO_SINGULARITY_HEADER;
  ENABLE_SINGULARITY_AVOIDANCE   : TRUE;
/MN
   1:  !Die Scanner Debug Coordinator ;
   2:  !Corresponds to dieScanner_keyence_debug.py ;
   3:  !Uses new register assignments R[86-189] ;
   4:  !Updated: 2025-07-07 ;
   5:   ;
   6:  !Die Scan Communication Registers: ;
   7:  !R[86] = Command from PC (1=pickup, 2=move_start, 5=scan, 7=final) ;
   8:  !R[87] = Status to PC (0=ready, 1=busy, 2=complete, 3=error) ;
   9:  !R[88] = Current X position (updated every 4ms) ;
  10:  !R[89] = Current Y position (updated every 4ms) ;
  11:  !R[90] = Current Z position (updated every 4ms) ;
  12:  !R[91] = Point counter ;
  13:  !R[92] = Total points ;
  14:  !R[93] = Final center X result ;
  15:  !R[94] = Final center Y result ;
  16:  !R[95] = Average die height ;
  17:  !R[96] = Confidence level (0-100%) ;
  18:  !R[97] = Return address for jump logic ;
  19:   ;
  20:  !Initialize communication ;
  21:  R[86:ds_command]=0 ;
  22:  R[87:ds_status]=0 ;
  23:  R[91:ds_point_counter]=0 ;
  24:   ;
  25:  !Start position update background task ;
  26:  R[97:return_addr]=1 ;
  27:  JMP LBL[50:POSITION_UPDATE_START] ;
  28:   ;
  29:  LBL[1:MAIN_LOOP] ;
  30:  !Main command processing loop ;
  31:   ;
  32:  !Update current position registers ;
  33:  R[88:ds_current_x]=$WORLD_POS[1,1] ;
  34:  R[89:ds_current_y]=$WORLD_POS[1,2] ;
  35:  R[90:ds_current_z]=$WORLD_POS[1,3] ;
  36:   ;
  37:  !Check for commands from PC ;
  38:  IF R[86:ds_command]=1 THEN ;
  39:  !Command 1: Pick up sensor jig ;
  40:  R[87:ds_status]=1 ;
  41:  R[97:return_addr]=2 ;
  42:  JMP LBL[10:PICKUP_SENSOR_JIG] ;
  43:  ENDIF ;
  44:   ;
  45:  LBL[2:RETURN_FROM_PICKUP] ;
  46:  IF R[86:ds_command]=2 THEN ;
  47:  !Command 2: Move to scan start position ;
  48:  R[87:ds_status]=1 ;
  49:  R[97:return_addr]=3 ;
  50:  JMP LBL[20:MOVE_TO_SCAN_START] ;
  51:  ENDIF ;
  52:   ;
  53:  LBL[3:RETURN_FROM_MOVE] ;
  54:  IF R[86:ds_command]=5 THEN ;
  55:  !Command 5: Start continuous scanning motion ;
  56:  R[87:ds_status]=1 ;
  57:  R[97:return_addr]=4 ;
  58:  JMP LBL[30:START_CONTINUOUS_SCAN] ;
  59:  ENDIF ;
  60:   ;
  61:  LBL[4:RETURN_FROM_SCAN] ;
  62:  IF R[86:ds_command]=7 THEN ;
  63:  !Command 7: Move to final position ;
  64:  R[87:ds_status]=1 ;
  65:  R[97:return_addr]=5 ;
  66:  JMP LBL[40:MOVE_TO_FINAL_POSITION] ;
  67:  ENDIF ;
  68:   ;
  69:  LBL[5:RETURN_FROM_FINAL] ;
  70:  !Small delay to prevent overwhelming the CPU ;
  71:  WAIT    .050(sec) ;
  72:   ;
  73:  !Loop back to check for more commands ;
  74:  JMP LBL[1:MAIN_LOOP] ;
  75:   ;
  76:  !============================================ ;
  77:  !Subroutines with return jump logic ;
  78:  !============================================ ;
  79:   ;
  80:  LBL[10:PICKUP_SENSOR_JIG] ;
  81:  !Step 1: Pick up sensor jig from fixture ;
  82:  MESSAGE[Picking up sensor jig] ;
  83:J PR[35:sensor_jig_pickup] 100% FINE    ;
  84:  !Add gripper close logic here if needed ;
  85:  MESSAGE[Sensor jig picked up] ;
  86:  R[86:ds_command]=0 ;
  87:  R[87:ds_status]=0 ;
  88:  !Return to caller ;
  89:  IF R[97:return_addr]=2 THEN ;
  90:  JMP LBL[2:RETURN_FROM_PICKUP] ;
  91:  ENDIF ;
  92:   ;
  93:  LBL[20:MOVE_TO_SCAN_START] ;
  94:  !Step 2: Move to scan start position (65mm above static point) ;
  95:  MESSAGE[Moving to scan start position] ;
  96:J PR[36:die_scan_start] 50% FINE    ;
  97:  MESSAGE[At scan start position] ;
  98:  R[86:ds_command]=0 ;
  99:  R[87:ds_status]=0 ;
 100:  !Return to caller ;
 101:  IF R[97:return_addr]=3 THEN ;
 102:  JMP LBL[3:RETURN_FROM_MOVE] ;
 103:  ENDIF ;
 104:   ;
 105:  LBL[30:START_CONTINUOUS_SCAN] ;
 106:  !Step 5: Start continuous scanning motion ;
 107:  !PC calculates all positions, robot just moves ;
 108:  MESSAGE[Starting continuous scan motion] ;
 109:   ;
 110:  !Signal PC that scanning motion is ready ;
 111:  R[87:ds_status]=10 ;
 112:   ;
 113:  LBL[31:SCAN_MOTION_LOOP] ;
 114:  !Wait for PC to calculate next position ;
 115:  !PC writes coordinates to R[182-184] when ready ;
 116:  WAIT R[87:ds_status]=11    ;
 117:   ;
 118:  !Copy PC-calculated position from numerical registers to PR[37] ;
 119:  PR[37,1:scan_point_calc]=R[182:ds_next_pos_x] ;
 120:  PR[37,2:scan_point_calc]=R[183:ds_next_pos_y] ;
 121:  PR[37,3:scan_point_calc]=R[184:ds_next_pos_z] ;
 122:   ;
 123:  !Move to PC-calculated position ;
 124:L PR[37:scan_point_calc] 200mm/sec CNT50    ;
 125:   ;
 126:  !Signal PC that move is complete ;
 127:  R[87:ds_status]=10 ;
 128:   ;
 129:  !Check if PC found sufficient edges ;
 130:  IF R[96:ds_confidence]>=70 THEN ;
 131:  MESSAGE[Sufficient edges detected] ;
 132:  JMP LBL[32:SCAN_COMPLETE] ;
 133:  ENDIF ;
 134:   ;
 135:  !Check if PC signals scan complete ;
 136:  IF R[87:ds_status]=12 THEN ;
 137:  JMP LBL[32:SCAN_COMPLETE] ;
 138:  ENDIF ;
 139:   ;
 140:  !Continue scanning loop ;
 141:  JMP LBL[31:SCAN_MOTION_LOOP] ;
 142:   ;
 143:  LBL[32:SCAN_COMPLETE] ;
 144:  MESSAGE[Continuous scan complete] ;
 145:  R[86:ds_command]=0 ;
 146:  R[87:ds_status]=0 ;
 147:  !Return to caller ;
 148:  IF R[97:return_addr]=4 THEN ;
 149:  JMP LBL[4:RETURN_FROM_SCAN] ;
 150:  ENDIF ;
 151:   ;
 152:  LBL[40:MOVE_TO_FINAL_POSITION] ;
 153:  !Step 7: Move 100mm above calculated center ;
 154:  MESSAGE[Moving to final position] ;
 155:   ;
 156:  !Use calculated center from PC ;
 157:  PR[44,1:scan_complete_pos]=R[93:ds_center_x] ;
 158:  PR[44,2:scan_complete_pos]=R[94:ds_center_y] ;
 159:  PR[44,3:scan_complete_pos]=(R[95:ds_avg_height]+100) ;
 160:   ;
 161:  !Move to final position ;
 162:J PR[44:scan_complete_pos] 50% FINE    ;
 163:   ;
 164:  MESSAGE[At final position above die center] ;
 165:  R[86:ds_command]=0 ;
 166:  R[87:ds_status]=0 ;
 167:  !Return to caller ;
 168:  IF R[97:return_addr]=5 THEN ;
 169:  JMP LBL[5:RETURN_FROM_FINAL] ;
 170:  ENDIF ;
 171:   ;
 172:  LBL[50:POSITION_UPDATE_START] ;
 173:  !Initialize position tracking - called once at start ;
 174:  MESSAGE[Position tracking initialized] ;
 175:  !Return to main loop after initialization ;
 176:  IF R[97:return_addr]=1 THEN ;
 177:  JMP LBL[1:MAIN_LOOP] ;
 178:  ENDIF ;
/POS
/END